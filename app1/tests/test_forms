from django.test import TestCase
from django.contrib.auth.hashers import make_password
from .forms import CustomAuthenticationForm, ClienteForm, VehiculoForm
from .models import Clientes, Encargado, Vehiculo


class CustomAuthenticationFormTest(TestCase):
    def setUp(self):
        # Crear datos de prueba
        self.cliente = Clientes.objects.create(
            nombre="Juan",
            email="juan@example.com",
            password=make_password("password123"),
            telefono="123456789",
            direccion="Calle Falsa 123",
        )
        self.encargado = Encargado.objects.create(
            nombre="Admin",
            apellido="Apellido",
            password=make_password("adminpassword"),
            correo="admin@example.com",
            telefono="987654321",
        )

    def test_valid_login_with_email(self):
        form_data = {"username_or_email": "juan@example.com", "password": "password123"}
        form = CustomAuthenticationForm(data=form_data)
        self.assertTrue(form.is_valid())
        self.assertEqual(form.get_user(), self.cliente)

    def test_valid_login_with_username(self):
        form_data = {"username_or_email": "Juan", "password": "password123"}
        form = CustomAuthenticationForm(data=form_data)
        self.assertTrue(form.is_valid())
        self.assertEqual(form.get_user(), self.cliente)

    def test_invalid_login(self):
        form_data = {"username_or_email": "juan@example.com", "password": "wrongpassword"}
        form = CustomAuthenticationForm(data=form_data)
        self.assertFalse(form.is_valid())
        self.assertIn("Usuario o contraseña incorrectos.", form.errors["__all__"])


class ClienteFormTest(TestCase):
    def test_valid_cliente_form(self):
        form_data = {
            "nombre": "Juan",
            "email": "juan@example.com",
            "password": "password123",
            "confirm_password": "password123",
            "telefono": "123456789",
            "direccion": "Calle Falsa 123",
        }
        form = ClienteForm(data=form_data)
        self.assertTrue(form.is_valid())
        cliente = form.save()
        self.assertTrue(cliente.check_password("password123"))

    def test_passwords_do_not_match(self):
        form_data = {
            "nombre": "Juan",
            "email": "juan@example.com",
            "password": "password123",
            "confirm_password": "password456",
            "telefono": "123456789",
            "direccion": "Calle Falsa 123",
        }
        form = ClienteForm(data=form_data)
        self.assertFalse(form.is_valid())
        self.assertIn("Las contraseñas no coinciden.", form.errors["confirm_password"])


class VehiculoFormTest(TestCase):
    def test_valid_vehiculo_form(self):
        form_data = {
            "marca": "Toyota",
            "modelo": "Corolla",
            "year": "2022",
            "patente": "ABC12",
        }
        form = VehiculoForm(data=form_data)
        self.assertTrue(form.is_valid())

    def test_marca_required(self):
        form_data = {
            "marca": "",
            "modelo": "Corolla",
            "year": "2022",
            "patente": "ABC12",
        }
        form = VehiculoForm(data=form_data)
        self.assertFalse(form.is_valid())
        self.assertIn("Este campo es obligatorio.", form.errors["marca"])

    def test_modelo_required(self):
        form_data = {
            "marca": "Toyota",
            "modelo": "",
            "year": "2022",
            "patente": "ABC12",
        }
        form = VehiculoForm(data=form_data)
        self.assertFalse(form.is_valid())
        self.assertIn("Este campo es obligatorio.", form.errors["modelo"])
